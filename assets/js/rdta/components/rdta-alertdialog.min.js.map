{"version":3,"sources":["components/rdta-alertdialog.js"],"names":["RDTAAlertDialog","[object Object]","options","defaultOptions","type","html","text","txtCloseButton","this","Object","assign","undefined","thisClass","createHtmlDialog","setTimeout","listenOnCloseButton","listenOnKeyPressClose","previousFocus","document","activeElement","dialogMessage","dialogIcon","alertClass","dialogHtml","body","insertAdjacentHTML","classList","add","querySelector","focus","event","Event","dispatchEvent","addEventListener","handler","target","parentNode","matches","closest","remove","removeEventListener","key","code","altKey","ctrlKey","metaKey","shiftKey","click"],"mappings":";;AAKA,MAAAA,gBAcAC,YAAAC,GACA,IAAAC,EAAA,CACAC,KAAA,SACAC,KAAA,GACAC,KAAA,GACAC,eAAA,MAEAC,KAAAN,QAAAO,OAAAC,OAAAP,EAAAD,GACAC,OAAAQ,EAcAV,aAAAC,GACA,IAAAU,EAAA,IAAAJ,KAAAN,GAGAU,EAAAC,mBAEAC,YAAA,WAEAF,EAAAG,sBAEAH,EAAAI,0BACA,KASAf,mBACAO,KAAAS,cAAAC,SAAAC,cAEA,IAAAC,EAAA,GAEAA,EADAZ,KAAAN,SAAAM,KAAAN,QAAAI,KACA,MAAAE,KAAAN,QAAAI,KAAA,OAEAE,KAAAN,QAAAG,KAGA,IAAAgB,EAAA,GACAC,EAAA,GACA,GAAAd,KAAAN,SAAAM,KAAAN,QAAAE,KACA,OAAAI,KAAAN,QAAAE,MACA,IAAA,aACA,IAAA,OACAiB,EAAA,iHACAC,EAAA,aACA,MACA,IAAA,gBACA,IAAA,UACAD,EAAA,wHACAC,EAAA,gBACA,MACA,IAAA,gBACA,IAAA,UACAD,EAAA,kHACAC,EAAA,gBACA,MACA,IAAA,eACA,IAAA,SACA,QACAD,EAAA,kHACAC,EAAA,eAKA,IAAAC,EAAA,qEACAD,EADA,gKAGAD,EAAA,SACAD,EAJA,2HAOAZ,KAAAN,QAAAM,KAAAN,QAAAK,eAAA,MAAA,MACAC,KAAAN,QAAAM,KAAAN,QAAAK,eAAA,MARA,8BAcAW,SAAAM,KAAAC,mBAAA,YAAAF,GACAL,SAAAM,KAAAE,UAAAC,IAAA,6BAEAT,SAAAU,cAAA,4CACAV,SAAAU,cAAA,2CAAAC,QAIA,IAAAC,EAAA,IAAAC,MAAA,2BACAb,SAAAM,KAAAQ,cAAAF,GASA7B,sBACA,IAAAW,EAAAJ,KAEAU,SAAAM,KAAAS,iBAAA,SAAA,SAAAC,EAAAJ,GACA,IAAA,IAAAK,EAAAL,EAAAK,OAAAA,GAAAA,GAAA3B,KAAA2B,EAAAA,EAAAC,WAEA,GAAAD,EAAAE,QAAA,2BAAA,CACA,GAAAF,EAAAG,QAAA,yBAAA,CACAH,EAAAG,QAAA,yBAAAC,SACArB,SAAAM,KAAAE,UAAAa,OAAA,6BACArB,SAAAM,KAAAgB,oBAAA,QAAAN,GAGA,IAAAJ,EAAA,IAAAC,MAAA,2BACAb,SAAAM,KAAAQ,cAAAF,GAGAlB,EAAAK,eACAL,EAAAK,cAAAY,QAGA,UAYA5B,wBACAiB,SAAAM,KAAAS,iBAAA,SAAA,SAAAC,EAAAJ,GAEA,WAAAA,EAAAW,KAAA,gBAAAX,EAAAY,MAAA,UAAAZ,EAAAW,MACA,IAAAX,EAAAa,SACA,IAAAb,EAAAc,UACA,IAAAd,EAAAe,UACA,IAAAf,EAAAgB,UAGA5B,SAAAU,cAAA,+BAEAV,SAAAU,cAAA,wDACAV,SAAAU,cAAA,sDAAAC,QACAX,SAAAU,cAAA,sDAAAmB,QACA7B,SAAAM,KAAAgB,oBAAA,QAAAN","file":"rdta-alertdialog.min.js","sourcesContent":["/*! Rundiz template for admin v 2.1.11 \nLicense: MIT*//**\n * RDTA alert dialog\n */\n\n\nclass RDTAAlertDialog {\n\n\n    /**\n     * Class constructor.\n     * \n     * @private Do not access this method directly, it was called from `alert()` method.\n     * @param {object} options The options for alert dialog. Available options:<br>\n     *                                         `type` The alert type. Accept info, warning, success, danger.<br>\n     *                                         `html` The alert in HTML content if you want to use HTML in the alert.<br>\n     *                                         `text` The alert in text content. If both text & html were set, it will be use text by default.<br>\n     *                                         `txtCloseButton` Text on close button. Default is 'OK'.\n     * @returns {undefined}\n     */\n    constructor(options) {\n        let defaultOptions = {\n            'type': 'danger',\n            'html': '',\n            'text': '',\n            'txtCloseButton': 'OK'\n        };\n        this.options = Object.assign(defaultOptions, options);\n        defaultOptions = undefined;\n    }// constructor\n\n\n    /**\n     * Display alert dialog.\n     * \n     * @param {object} options The options for alert dialog. Available options:<br>\n     *                                         `type` The alert type. Accept info, warning, success, danger.<br>\n     *                                         `html` The alert in HTML content if you want to use HTML in the alert.<br>\n     *                                         `text` The alert in text content. If both text & html were set, it will be use text by default.<br>\n     *                                         `txtCloseButton` Text on close button. Default is 'OK'.\n     * @returns {undefined}\n     */\n    static alert(options) {\n        let thisClass = new this(options);\n\n        // create HTML and put to body\n        thisClass.createHtmlDialog();\n\n        setTimeout(function() {\n            // listen on click ok (close) button\n            thisClass.listenOnCloseButton();\n            // listen on key press (esc, enter) to close.\n            thisClass.listenOnKeyPressClose();\n        }, 600);\n    }// alert\n\n\n    /**\n     * Create HTML and put into body.\n     * \n     * @returns {undefined}\n     */\n    createHtmlDialog() {\n        this.previousFocus = document.activeElement;\n\n        let dialogMessage = '';\n        if (this.options && this.options.text) {\n            dialogMessage = '<p>' + this.options.text + '</p>';\n        } else {\n            dialogMessage = this.options.html;\n        }\n\n        let dialogIcon = '';\n        let alertClass = '';\n        if (this.options && this.options.type) {\n            switch (this.options.type) {\n                case 'alert-info':\n                case 'info':\n                    dialogIcon = '<span class=\"fa-stack fa-3x\"><i class=\"far fa-circle fa-2x\"></i><i class=\"fas fa-info fa-stack-1x\"></i></span>';\n                    alertClass = 'alert-info';\n                    break;\n                case 'alert-warning':\n                case 'warning':\n                    dialogIcon = '<span class=\"fa-stack fa-3x\"><i class=\"far fa-circle fa-2x\"></i><i class=\"fas fa-exclamation fa-stack-1x\"></i></span>';\n                    alertClass = 'alert-warning';\n                    break;\n                case 'alert-success':\n                case 'success':\n                    dialogIcon = '<span class=\"fa-stack fa-3x\"><i class=\"far fa-circle fa-2x\"></i><i class=\"fas fa-check fa-stack-1x\"></i></span>';\n                    alertClass = 'alert-success';\n                    break;\n                case 'alert-danger':\n                case 'danger':\n                default:\n                    dialogIcon = '<span class=\"fa-stack fa-3x\"><i class=\"far fa-circle fa-2x\"></i><i class=\"fas fa-times fa-stack-1x\"></i></span>';\n                    alertClass = 'alert-danger';\n                    break;\n            }\n        }\n\n        let dialogHtml = '<div class=\"rd-alertdialog-modal show\">' +\n            '<div class=\"rd-alertdialog ' + alertClass + '\" aria-describedby=\"rd-alertdialog-body\" aria-modal=\"true\">' +\n                '<div id=\"rd-alertdialog-body\" class=\"rd-dialog-body\">' +\n                    '<div class=\"rd-alertdialog-icon text-center\">' + dialogIcon + '</div>' +\n                    dialogMessage +\n                '</div>' +\n                '<div class=\"rd-dialog-buttons\">' + \n                    '<button class=\"rd-button primary\" type=\"button\" data-dismiss=\"dialog\" aria-label=\"' + (this.options ? this.options.txtCloseButton : 'OK') + '\">' +\n                        (this.options ? this.options.txtCloseButton : 'OK') +\n                    '</button>' +\n                '</div>' +\n            '</div>' +\n        '</div>';\n\n        document.body.insertAdjacentHTML('beforeend', dialogHtml);\n        document.body.classList.add('rd-alertdialog-modal-open');\n\n        if (document.querySelector('.rd-alertdialog [data-dismiss=\"dialog\"]')) {\n            document.querySelector('.rd-alertdialog [data-dismiss=\"dialog\"]').focus();\n        }\n\n        // fire event.\n        let event = new Event('rdta.alertdialog.opened');\n        document.body.dispatchEvent(event);\n    }// createHtmlDialog\n\n\n    /**\n     * Listen on click OK (close) button to close dialog.\n     * \n     * @returns {undefined}\n     */\n    listenOnCloseButton() {\n        let thisClass = this;\n\n        document.body.addEventListener('click', function handler(event) {\n            for (let target= event.target; target && target != this; target = target.parentNode) {\n                // loop parent nodes from the target to the delegation node\n                if (target.matches('[data-dismiss=\"dialog\"]')) {\n                    if (target.closest('.rd-alertdialog-modal')) {\n                        target.closest('.rd-alertdialog-modal').remove();\n                        document.body.classList.remove('rd-alertdialog-modal-open');\n                        document.body.removeEventListener('click', handler);\n\n                        // fire event\n                        let event = new Event('rdta.alertdialog.closed');\n                        document.body.dispatchEvent(event);\n\n                        // back to previous focus.\n                        if (thisClass.previousFocus) {\n                            thisClass.previousFocus.focus();\n                        }\n                    }\n                    break;\n                }\n            }\n        });\n    }// listenOnCloseButton\n\n\n    /**\n     * Listen on key press to close if no attribute specified.\n     * \n     * @private\n     */\n    listenOnKeyPressClose() {\n        document.body.addEventListener('keyup', function handler(event) {\n            if (\n                (event.key === 'Escape' || event.code === 'NumpadEnter' || event.key === 'Enter') &&\n                event.altKey === false &&\n                event.ctrlKey === false &&\n                event.metaKey === false &&\n                event.shiftKey === false\n            ) {\n                // if key press (already up) for escape, numpad enter, enter\n                if (document.querySelector('.rd-alertdialog-modal.show')) {\n                    // alert dialog is showing.\n                    if (document.querySelector('.rd-alertdialog-modal.show [data-dismiss=\"dialog\"]')) {\n                        document.querySelector('.rd-alertdialog-modal.show [data-dismiss=\"dialog\"]').focus();\n                        document.querySelector('.rd-alertdialog-modal.show [data-dismiss=\"dialog\"]').click();\n                        document.body.removeEventListener('keyup', handler);\n                    }\n                }\n            }\n        });\n    }// listenOnKeyPressClose\n\n\n}// RDTAAlertDialog"]}