{"version":3,"sources":["components/rdta-tabs.js"],"names":["RDTATabs","constructor","options","this","selector","activateTabContent","targetTabContent","thisClass","countTabNav","activeTabNav","selectorTabNav","querySelector","allLinks","querySelectorAll","forEach","item","index","hash","dataset","targettab","parentElement","classList","add","remove","i","max","children","length","contains","rememberLastTab","window","localStorage","setItem","eventDetail","tabsElement","tabsSelector","targetTab","targetTabNumber","event","CustomEvent","detail","document","dispatchEvent","addRequiredClasses","tabNavElement","activeTabs","ajaxTabContent","url","xhr","XMLHttpRequest","addEventListener","e","innerHTML","responseText","open","send","static","defaultOptions","Object","assign","lastTab","getItem","isNaN","parseInt","listenOnTabNav","setTabNavHorizontalScroll","listenWindowResize","listenClickOnTabScroll","thisLink","currentTarget","activeElement","target","rdTabsNavScroll","parentNode","rdTabs","closest","preventDefault","tabsNav","tabsNavLeftPosition","style","transform","replace","firstTabNavItem","expectOffsetLeft","offsetWidth","totalVisibleTabsCounted","offsetLeft","Math","abs","newLeftPosition","lastTabNavItem","mainTabsElement","getAttribute","charAt","navContainerClass","navWrapperClass","navWrapperBottomLineClass","tabsNavVisibleWidth","totalTabsNavWIdth","listItem","computed","getComputedStyle","listItemWidth","getBoundingClientRect","width","marginLeft","marginRight","tabsNavContainer","createElement","insertBefore","appendChild","tabsNavWrapperBottomLine","tabsNavWrapper","scrollLeftElement","insertAdjacentHTML","scrollRightElement","replaceWith","childNodes"],"mappings":";;;;AAKA,MAAAA,SAUAC,YAAAC,GACAC,KAAAC,SAAAF,EAAAE,SAAAF,EAAAE,SAAA,GACAD,KAAAD,4BAAA,EACA,CAWAG,mBAAAD,EAAAE,GACA,IAAAA,IAAAF,EACA,SAEA,IAAAG,EAAAJ,KAGAK,EAAA,EACAC,EAAA,EAEAC,EAAAN,EAAAO,cAAA,gBACA,GAAAD,EAAA,CACA,IAAAE,EAAAF,EAAAG,iBAAA,KACAD,GACAA,EAAAE,SAAA,SAAAC,EAAAC,GACAD,EAAAE,OAAAX,GAAAS,EAAAG,QAAAC,YAAAb,GACAS,EAAAK,cAAAC,UAAAC,IAAA,UACAb,EAAAD,GAEAO,EAAAK,cAAAC,UAAAE,OAAA,UAEAf,GACA,GAEA,CAIA,QAAAgB,EAAA,EAAAC,EAAArB,EAAAsB,SAAAC,OAAAH,EAAAC,EAAAD,IACApB,EAAAsB,SAAAF,GAAAH,UAAAO,SAAA,gBAEAxB,EAAAsB,SAAAF,GAAAH,UAAAE,OAAA,UAKA,GAAAnB,EAAAO,cAAAL,GAAA,CAGAF,EAAAO,cAAAL,GAAAe,UAAAC,IAAA,WACA,IAAAf,EAAAL,QAAA2B,iBAAAC,OAAAC,cAEAD,OAAAC,aAAAC,QAAA,gBAAAzB,EAAAH,SAAAK,GAGA,IAAAwB,EAAA,CACAC,YAAA9B,EACA+B,aAAA5B,EAAAH,SACAgC,UAAA9B,EACA+B,gBAAA5B,GAEA6B,EAAA,IAAAC,YAAA,uBAAAC,OAAAP,IACAQ,SAAA9B,cAAAJ,EAAAH,UAAAsC,cAAAJ,EACA,CACA,CAUAK,mBAAAzC,GACA,IAAAK,EAAAJ,KAEAsC,SAAA5B,iBAAAN,EAAAH,UAAAU,SAAA,SAAAC,EAAAC,GAIAD,EAAAM,UAAAC,IAAA,WACAP,EAAAJ,cAAA,iBACAI,EAAAJ,cAAA,iBAAAU,UAAAC,IAAA,eACAP,EAAAJ,cAAA,kBACAI,EAAAJ,cAAA,iBAAAU,UAAAC,IAAA,eAEA,QAAAE,EAAA,EAAAA,EAAAT,EAAAW,SAAAC,OAAAH,IAEAT,EAAAW,SAAAF,GAAAH,UAAAO,SAAA,gBAGAb,EAAAW,SAAAF,GAAAH,UAAAC,IAAA,mBAKA,GAAAP,EAAAJ,cAAA,iBACA,IAAAiC,EAAA7B,EAAAJ,cAAA,gBACA,QAAAa,EAAA,EAAAA,EAAAoB,EAAAlB,SAAAC,OAAAH,IAEA,GAAAA,IAAAtB,EAAA2C,WAAA,CACA,IAAAT,EAAA,GACAQ,EAAAlB,SAAAF,GAAAb,cAAA,KAAAO,QAAAC,UACAiB,EAAAQ,EAAAlB,SAAAF,GAAAb,cAAA,KAAAO,QAAAC,UACAyB,EAAAlB,SAAAF,GAAAb,cAAA,KAAAM,OACAmB,EAAAQ,EAAAlB,SAAAF,GAAAb,cAAA,KAAAM,MAEAmB,GACA7B,EAAAF,mBAAAU,EAAAqB,GAEA,KACA,CAEA,CACA,GACA,CAYAU,eAAAC,EAAA3C,EAAAE,GACA,IAAA0C,EAAA,IAAAC,eACA1C,EAAAJ,KAEA6C,EAAAE,iBAAA,kBAAAC,GACA,IAAAb,EAAA,IAAAC,YAAA,wBAAAC,OAAAW,IACAV,SAAA9B,cAAAJ,EAAAH,UAAAsC,cAAAJ,EACA,IACAU,EAAAE,iBAAA,oBAAAC,GACA,IAAAb,EAAA,IAAAC,YAAA,+BAAAC,OAAAW,IACAV,SAAA9B,cAAAJ,EAAAH,UAAAsC,cAAAJ,GAEAlC,EAAAO,cAAAL,KACAF,EAAAO,cAAAL,GAAA8C,UAAAjD,KAAAkD,aAEA,IAEAL,EAAAM,KAAA,MAAAP,GACAC,EAAAO,MACA,CAUAC,YAAApD,EAAAF,GACA,IAAAuD,EAAA,CACAZ,WAAA,EACAhB,iBAAA,GAQA,SALA3B,EADA,mBACAwD,OAAAC,OAAAF,EAAAvD,GAEAuD,GAGA5B,iBAAAC,OAAAC,aAAA,CAEA,IAAA6B,EAAA9B,OAAAC,aAAA8B,QAAA,gBAAAzD,GACA0D,MAAAF,IAAA,KAAAA,GAAA,OAAAA,IACA1D,EAAA2C,WAAAkB,SAAAH,GAEA,CAEA,IAAArD,EAAA,IAAAJ,KAAA,CAAAC,WAAAF,YACAK,EAAAoC,mBAAAzC,GACAK,EAAAyD,eAAA9D,GAGAK,EAAA0D,4BACA1D,EAAA2D,qBACA3D,EAAA4D,wBACA,CAYAA,yBACA,IAAA5D,EAAAJ,KAEAsC,SAAAS,iBAAA,SAAAZ,IACA,IAAA8B,EACAA,EAAA9B,EAAA+B,cAAAC,cACAF,IACAA,EAAA9B,EAAAiC,QAGA,IAAAC,EAAAJ,EAAAK,WACAC,EAAAF,EAAAG,QAAA,YACA,IAEAH,EAAAnD,UAAAO,SAAA,6BACA4C,EAAAnD,UAAAO,SAAA,+BAEA8C,IAAAF,EAAAG,QAAApE,EAAAH,UACA,CAGAkC,EAAAsC,iBAEA,IAAAC,EAAAH,EAAA/D,cAAA,gBACAmE,EAAAD,EAAAE,MAAAC,UAAAC,QAAA,gBAOA,GALAH,EADA,KAAAA,EACA,EAEAf,SAAAe,GAGAN,EAAAnD,UAAAO,SAAA,6BAEA,IAIAsD,EAJAC,EAAAL,EAAAf,SAAAc,EAAAO,aACAD,EAAA,IACAA,EAAA,GAGA,IAAAE,EAAA,EACA,QAAA7D,EAAAqD,EAAAnD,SAAAC,OAAA,EAAAH,GAAA,GAEAuC,SAAAc,EAAAnD,SAAAF,GAAA8D,YAAAC,KAAAC,IAAAL,GAFA3D,IAGA0D,EAAAL,EAAAnD,SAAAF,GAIA6D,IAIA,IAAAI,EAAAP,EAAAI,WAEAG,EADAJ,GAAAR,EAAAnD,SAAAC,OACA,EAEA,IAAA8D,EAEAZ,EAAAE,MAAAC,UAAA,cAAAS,EAAA,KACA,SAAAjB,EAAAnD,UAAAO,SAAA,8BAEA,IAAA8D,EACAL,EAAA,EACA,QAAA7D,EAAA,EAAAA,EAAAqD,EAAAnD,SAAAC,QAEAkD,EAAAnD,SAAAF,GAAA8D,WAAAR,EAAAD,EAAAO,cAAA,EAFA5D,IAGAkE,EAAAb,EAAAnD,SAAAF,GAIA6D,IAIAA,GAAAR,EAAAnD,SAAAC,SAEAkD,EAAAE,MAAAC,UAAA,eAAAU,EAAAJ,WAAA,MAEA,CACA,IAEA,CAWAtB,eAAA9D,GACA,IAAAK,EAAAJ,KACAsC,SAAA9B,cAAAR,KAAAC,UAEAqC,SAAAS,iBAAA,kBAAAZ,GACA,IAAAiC,EAIA,GAHAjC,EAAA+B,eAAA/B,EAAA+B,cAAAC,gBACAC,EAAAjC,EAAA+B,cAAAC,gBAEAC,EACA,OAGA,IAAAoB,EAAApB,EAAAI,QAAA,YACA,GAAAgB,GAKApB,EAAAI,QAAA,iBAMAgB,IAAApB,EAAAI,QAAApE,EAAAH,UAAA,CACAkC,EAAAsC,iBACA,IAAAxC,EAAA,GACAmC,EAAArD,QAAAC,UACAiB,EAAAmC,EAAArD,QAAAC,UACAoD,EAAAtD,OACAmB,EAAAmC,EAAAtD,MAGAsD,EAAAqB,aAAA,eAAArB,EAAAqB,aAAA,QAAAC,OAAA,KAAAtB,EAAAtD,MACAV,EAAAuC,eAAAyB,EAAAqB,aAAA,QAAArB,EAAAI,QAAApE,EAAAH,UAAAgC,GAGA7B,EAAAF,mBAAAkE,EAAAI,QAAApE,EAAAH,UAAAgC,EACA,CACA,GACA,CAUA8B,qBACA,IAAA3D,EAAAJ,KACA2B,OAAAoB,iBAAA,UAAAZ,IACA/B,EAAA0D,2BAAA,GAEA,CAUAA,4BAEA,MAAA6B,EAAA,wBACAC,EAAA,sBACAC,EAAA,iCAEAvD,SAAA5B,iBALAV,KAKAC,UAAAU,SAAA,CAAAC,EAAAC,KAEA,IAAAD,EAAAM,UAAAO,SAAA,kBAEA,IAAAiD,EAAA9D,EAAAJ,cAAA,gBACAsF,EAAApB,EAAAO,YACAc,EAAA,EAaA,GAZAnF,EAAAF,iBAAA,oBAAAC,SAAAqF,IACA,IAAAC,EAAAC,iBAAAF,GACAG,EACAvC,SAAAoC,EAAAI,wBAAAC,OACAzC,SAAAqC,EAAAK,YACA1C,SAAAqC,EAAAM,aAEAR,EACAnC,SAAAmC,GAAAI,CACA,IAGAJ,EAAAD,EAAA,CAEA,IAAAlF,EAAAJ,cAAA,IAAAmF,GAAA,CAGA,IAAAa,EAAAlE,SAAAmE,cAAA,OACAD,EAAAtF,UAAAC,IAAAwE,GACAjB,EAAAJ,WAAAoC,aAAAF,EAAA9B,GACA8B,EAAAG,YAAAjC,EACA,CAEA,IAAA9D,EAAAJ,cAAA,IAAAoF,GAAA,CAGA,IAAAgB,EAAAtE,SAAAmE,cAAA,OACAG,EAAA1F,UAAAC,IAAA0E,GACAnB,EAAAJ,WAAAoC,aAAAE,EAAAlC,GACAkC,EAAAD,YAAAjC,GACA,IAAAmC,EAAAvE,SAAAmE,cAAA,OACAI,EAAA3F,UAAAC,IAAAyE,GACAgB,EAAAtC,WAAAoC,aAAAG,EAAAD,GACAC,EAAAF,YAAAC,EACA,CAEA,IAAAJ,EAAA5F,EAAAJ,cAAA,IAAAmF,GAGA,GAAAa,EAAA,CACA,IAAAA,EAAAhG,cAAA,8BACA,IAAAsG,EAAA,gGACAN,EAAAO,mBAAA,aAAAD,EACA,CACA,IAAAN,EAAAhG,cAAA,+BACA,IAAAwG,EAAA,kGACAR,EAAAO,mBAAA,YAAAC,EACA,CACA,CAGAtC,EAAAxD,UAAAC,IAAA,gBACA,MAEA,IAAAqF,EAAA5F,EAAAJ,cAAA,IAAAmF,GAaA,GAVAa,IACAA,EAAAhG,cAAA,8BACAgG,EAAAhG,cAAA,6BAAAY,SAEAoF,EAAAhG,cAAA,+BACAgG,EAAAhG,cAAA,8BAAAY,UAKAR,EAAAJ,cAAA,IAAAoF,GAAA,CAGA,IAAAgB,EAAAhG,EAAAJ,cAAA,IAAAqF,GACAe,EAAAK,eAAAL,EAAAM,YACA,IAAAL,EAAAjG,EAAAJ,cAAA,IAAAoF,GACAiB,EAAAI,eAAAJ,EAAAK,WACA,CAEA,GAAAtG,EAAAJ,cAAA,IAAAmF,GAAA,CAGA,IAAAa,EAAA5F,EAAAJ,cAAA,IAAAmF,GACAa,EAAAS,eAAAT,EAAAU,WACA,CAEAxC,EAAAxD,UAAAE,OAAA,gBACA,CACA,CAEA,GAEA","file":"rdta-tabs.min.js","sourcesContent":["/*!\n Rundiz template for admin v 2.2.2 \nLicense: MIT\n*/\n/**\n * RDTA Tabs\n */\n\n\nclass RDTATabs {\n\n\n    /**\n     * Class constructor.\n     * \n     * @private Do not access this method directly, it was called via `init()` method.\n     * @param {object} options\n     * @returns {RDTATabs}\n     */\n    constructor(options) {\n        this.selector = (options.selector ? options.selector : '');\n        this.options = (options.options ? options.options : {});\n    }// constructor\n\n\n    /**\n     * Activate tab content.\n     * \n     * @private This method was called from `addRequiredClasses()`, `listenOnTabNav()`.\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    activateTabContent(selector, targetTabContent) {\n        if (!targetTabContent || !selector) {\n            return false;\n        }\n        let thisClass = this;\n\n        // set active on tab nav.\n        let countTabNav = 0;\n        let activeTabNav = 0;\n        /// get selector's first tab nav that were found.\n        let selectorTabNav = selector.querySelector('.rd-tabs-nav');\n        if (selectorTabNav) {\n            let allLinks = selectorTabNav.querySelectorAll('a');\n            if (allLinks) {\n                allLinks.forEach(function(item, index) {\n                    if (item.hash === targetTabContent || item.dataset.targettab === targetTabContent) {\n                        item.parentElement.classList.add('active');\n                        activeTabNav = countTabNav;\n                    } else {\n                        item.parentElement.classList.remove('active');\n                    }\n                    countTabNav++;\n                });\n            }// endif; allLinks\n        }// endif; selectorTabNav\n\n        // ------------------------------------------\n\n        for (let i = 0, max = selector.children.length; i < max; i++) {\n            if (!selector.children[i].classList.contains('rd-tabs-nav')) {\n                // if children of item is not tab nav.\n                selector.children[i].classList.remove('active');\n            }\n        }\n\n        // set active on tab content.\n        if (selector.querySelector(targetTabContent)) {\n            // if tab content exists.\n            // add active class to it.\n            selector.querySelector(targetTabContent).classList.add('active');\n            if (thisClass.options.rememberLastTab === true && window.localStorage) {\n                // if remember last tab.\n                window.localStorage.setItem('rdtaTabsLast-' + thisClass.selector, activeTabNav);\n            }\n            // trigger event.\n            let eventDetail = {\n                'tabsElement': selector,\n                'tabsSelector': thisClass.selector,\n                'targetTab': targetTabContent,\n                'targetTabNumber': activeTabNav\n            };\n            let event = new CustomEvent('rdta.tabs.activeTab', {'detail': eventDetail});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        }\n    }// activateTabContent\n\n\n    /**\n     * Add required CSS classes.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {object} options\n     * @returns {undefined}\n     */\n    addRequiredClasses(options) {\n        let thisClass = this;\n\n        document.querySelectorAll(thisClass.selector).forEach(function(item, index) {\n            // start looping each selector.\n\n            // add required class name.\n            item.classList.add('rd-tabs');\n            if (item.querySelector('.rd-tabs > ul')) {\n                item.querySelector('.rd-tabs > ul').classList.add('rd-tabs-nav');\n            } else if (item.querySelector('.rd-tabs > ol')) {\n                item.querySelector('.rd-tabs > ol').classList.add('rd-tabs-nav');\n            }\n            for (let i = 0; i < item.children.length; i++) {\n                // loop each children of selector.\n                if (!item.children[i].classList.contains('rd-tabs-nav')) {\n                    // if children of item is not tab nav.\n                    // add tabs content class.\n                    item.children[i].classList.add('rd-tabs-content');\n                }\n            }// endfor;\n\n            // set active class\n            if (item.querySelector('.rd-tabs-nav')) {\n                let tabNavElement = item.querySelector('.rd-tabs-nav');\n                for (let i = 0; i < tabNavElement.children.length; i++) {\n                    // loop each li.\n                    if (i === options.activeTabs) {\n                        let targetTab = '';\n                        if (tabNavElement.children[i].querySelector('a').dataset.targettab) {\n                            targetTab = tabNavElement.children[i].querySelector('a').dataset.targettab;\n                        } else if (tabNavElement.children[i].querySelector('a').hash) {\n                            targetTab = tabNavElement.children[i].querySelector('a').hash;\n                        }\n                        if (targetTab) {\n                            thisClass.activateTabContent(item, targetTab);\n                        }\n                        break;\n                    }\n                }// endfor;\n            }\n        });\n    }// addRequiredClasses\n\n\n    /**\n     * Ajax and set content to target. Did not activate the tab nav.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {string} url\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    ajaxTabContent(url, selector, targetTabContent) {\n        let xhr = new XMLHttpRequest();\n        let thisClass = this;\n\n        xhr.addEventListener('error', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxFailed', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        });\n        xhr.addEventListener('loadend', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxContentLoaded', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n\n            if (selector.querySelector(targetTabContent)) {\n                selector.querySelector(targetTabContent).innerHTML = this.responseText;\n            }\n        });\n\n        xhr.open('GET', url);\n        xhr.send();\n    }// ajaxTabContent\n\n\n    /**\n     * Initialize RDTA tabs.\n     * \n     * @param {string} selector\n     * @param {object} options\n     * @returns {undefined}\n     */\n    static init(selector, options) {\n        let defaultOptions = {\n            'activeTabs': 0,\n            'rememberLastTab': false,\n        };\n        if (typeof(options) === 'object') {\n            options = Object.assign(defaultOptions, options);\n        } else {\n            options = defaultOptions;\n        }\n\n        if (options.rememberLastTab === true && window.localStorage) {\n            // if option was set to remember last tab.\n            let lastTab = window.localStorage.getItem('rdtaTabsLast-' + selector);\n            if (!isNaN(lastTab) && lastTab !== '' && lastTab !== null) {\n                options.activeTabs = parseInt(lastTab);\n            }\n        }\n\n        let thisClass = new this({'selector': selector, 'options': options});\n        thisClass.addRequiredClasses(options);\n        thisClass.listenOnTabNav(options);\n\n        // set tab navbar horizontal scroll if overflow. this must run after set activate tab content.\n        thisClass.setTabNavHorizontalScroll();\n        thisClass.listenWindowResize();\n        thisClass.listenClickOnTabScroll();\n    }// init\n\n\n    /**\n     * Listen click on tabs nav scroll. \n     * \n     * Tabs nav scroll will be visible on tabs size is overflow visible width.\n     * \n     * @since 2.2.1\n     * @private This method was called from `init()`.\n     * @returns {undefined}\n     */\n    listenClickOnTabScroll() {\n        let thisClass = this;\n\n        document.addEventListener('click', (event) => {\n            let thisLink;\n            thisLink = event.currentTarget.activeElement;\n            if (!thisLink) {\n                thisLink = event.target;\n            }\n\n            let rdTabsNavScroll = thisLink.parentNode;\n            let rdTabs = rdTabsNavScroll.closest('.rd-tabs');\n            if (\n                (\n                    rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-left') ||\n                    rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-right')\n                ) &&\n                rdTabs === rdTabsNavScroll.closest(thisClass.selector)\n            ) {\n                // if user is really clicked on tabs nav scroll (horizontal).\n                // prevent follow link.\n                event.preventDefault();\n\n                let tabsNav = rdTabs.querySelector('.rd-tabs-nav');\n                let tabsNavLeftPosition = tabsNav.style.transform.replace(/[^\\-\\d.]/g, '');\n                if ('' === tabsNavLeftPosition) {\n                    tabsNavLeftPosition = 0;\n                } else {\n                    tabsNavLeftPosition = parseInt(tabsNavLeftPosition);\n                }\n\n                if (rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-left')) {\n                    // if user clicked on tabs nav left (<).\n                    let expectOffsetLeft = (tabsNavLeftPosition + parseInt(tabsNav.offsetWidth));\n                    if (expectOffsetLeft > 0) {\n                        expectOffsetLeft = 0;\n                    }\n                    let firstTabNavItem;\n                    let totalVisibleTabsCounted = 1;\n                    for (let i = (tabsNav.children.length - 1); i >= 0; i--) {\n                        //console.log(tabsNav.children[i].innerText, tabsNav.children[i].offsetLeft);\n                        if (parseInt(tabsNav.children[i].offsetLeft) > Math.abs(expectOffsetLeft)) {\n                            firstTabNavItem = tabsNav.children[i];\n                        } else {\n                            break;\n                        }\n                        totalVisibleTabsCounted++;\n                    }// endfor;\n                    //console.log(firstTabNavItem.outerHTML, firstTabNavItem, firstTabNavItem.offsetLeft);\n\n                    let newLeftPosition = firstTabNavItem.offsetLeft;\n                    if (totalVisibleTabsCounted >= tabsNav.children.length) {\n                        newLeftPosition = 0;\n                    } else {\n                        newLeftPosition = '-' + newLeftPosition;\n                    }\n                    tabsNav.style.transform = 'translateX(' + newLeftPosition + 'px)';\n                } else if (rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-right')) {\n                    // if user clicked on tabs nav right (>).\n                    let lastTabNavItem;\n                    let totalVisibleTabsCounted = 1;\n                    for (let i = 0; i < tabsNav.children.length; i++) {\n                        //console.log('children offset left:', tabsNav.children[i], tabsNav.children[i].offsetLeft);\n                        if ((tabsNav.children[i].offsetLeft + tabsNavLeftPosition) < tabsNav.offsetWidth === true) {\n                            lastTabNavItem = tabsNav.children[i];\n                        } else {\n                            break;\n                        }\n                        totalVisibleTabsCounted++;\n                    }// endfor;\n                    //console.log('last visible: ', lastTabNavItem);\n\n                    if (totalVisibleTabsCounted <= tabsNav.children.length) {\n                        // if counted for visible tabs is less than all tabs. still be able to work, otherwise don't have to work anymore.\n                        tabsNav.style.transform = 'translateX(-' + lastTabNavItem.offsetLeft + 'px)';\n                    }\n                }// endif user clicked on < or >.\n            }// endif; user is really click on tabs nav scroll.\n        });\n    }// listenClickOnTabScroll\n\n\n    /**\n     * Listen on tab nav click and activate tab content.\n     * \n     * @link https://stackoverflow.com/a/25248515/128761 Method 1 for delegation selection.\n     * @private Do not call this, just call `init()`.\n     * @param {object} options\n     * @returns {undefined}\n     */\n    listenOnTabNav(options) {\n        let thisClass = this;\n        let tabElement = document.querySelector(this.selector);\n\n        document.addEventListener('click', function(event) {\n            let target;\n            if (event.currentTarget && event.currentTarget.activeElement) {\n                target = event.currentTarget.activeElement;\n            }\n            if (!target) {\n                return ;\n            }\n\n            let mainTabsElement = target.closest('.rd-tabs');\n            if (!mainTabsElement) {\n                // if not click inside main tabs element.\n                return ;\n            }\n\n            let tabsNav = target.closest('.rd-tabs-nav');\n            if (!tabsNav) {\n                // if not click inside tabs nav.\n                return ;\n            }\n\n            if (mainTabsElement === target.closest(thisClass.selector)) {\n                event.preventDefault();\n                let targetTab = '';\n                if (target.dataset.targettab) {\n                    targetTab = target.dataset.targettab;\n                } else if (target.hash) {\n                    targetTab = target.hash;\n                }\n\n                if (target.getAttribute('href') && target.getAttribute('href').charAt(0) !== '#' && !target.hash) {\n                    thisClass.ajaxTabContent(target.getAttribute('href'), target.closest(thisClass.selector), targetTab)\n                }\n\n                thisClass.activateTabContent(target.closest(thisClass.selector), targetTab);\n            }\n        });\n    }// listenOnTabNav\n\n\n    /**\n     * Listen on window resize and do the task.\n     * \n     * @since 2.2.1\n     * @private This method was called from `init()`.\n     * @returns {undefined}\n     */\n    listenWindowResize() {\n        let thisClass = this;\n        window.addEventListener('resize', (event) => {\n            thisClass.setTabNavHorizontalScroll();\n        });\n    }// listenWindowResize\n\n\n    /**\n     * Set tabs nav horizontal scroll.\n     * \n     * @since 2.2.1\n     * @private This method was called from `init()`, `listenWindowResize()`.\n     * @returns {undefined}\n     */\n    setTabNavHorizontalScroll() {\n        let thisClass = this;\n        const navContainerClass = 'rd-tabs-nav-container';\n        const navWrapperClass = 'rd-tabs-nav-wrapper';\n        const navWrapperBottomLineClass = 'rd-tabs-nav-wrapper-bottomline';\n\n        document.querySelectorAll(thisClass.selector).forEach((item, index) => {\n            // loop each selector. `item` is now each `.rd-tabs` main element.\n            if (!item.classList.contains('tabs-vertical')) {\n                // if this main tab element is NOT vertical tabs.\n                let tabsNav = item.querySelector('.rd-tabs-nav');\n                let tabsNavVisibleWidth = tabsNav.offsetWidth;\n                let totalTabsNavWIdth = 0;\n                item.querySelectorAll('.rd-tabs-nav > *').forEach((listItem) => {\n                    let computed = getComputedStyle(listItem);\n                    let listItemWidth = (\n                        parseInt(listItem.getBoundingClientRect().width)\n                        + parseInt(computed.marginLeft)\n                        + parseInt(computed.marginRight)\n                    );\n                    totalTabsNavWIdth = (\n                        (parseInt(totalTabsNavWIdth) + listItemWidth)\n                    );\n                });\n\n                if (totalTabsNavWIdth > tabsNavVisibleWidth) {\n                    // if real nav width (included all items) is wider than visible width.\n                    if (!item.querySelector('.' + navContainerClass)) {\n                        // if tabs nav container is not exists.\n                        // make tabs navbar inside container.\n                        let tabsNavContainer = document.createElement('div');\n                        tabsNavContainer.classList.add(navContainerClass);\n                        tabsNav.parentNode.insertBefore(tabsNavContainer, tabsNav);\n                        tabsNavContainer.appendChild(tabsNav);\n                    }\n\n                    if (!item.querySelector('.' + navWrapperClass)) {\n                        // if tabs nav wrapper is not exists.\n                        // wrap tabs navbar inside wrapper to hide overflow.\n                        let tabsNavWrapperBottomLine = document.createElement('div');\n                        tabsNavWrapperBottomLine.classList.add(navWrapperBottomLineClass);\n                        tabsNav.parentNode.insertBefore(tabsNavWrapperBottomLine, tabsNav);\n                        tabsNavWrapperBottomLine.appendChild(tabsNav);\n                        let tabsNavWrapper = document.createElement('div');\n                        tabsNavWrapper.classList.add(navWrapperClass);\n                        tabsNavWrapperBottomLine.parentNode.insertBefore(tabsNavWrapper, tabsNavWrapperBottomLine);\n                        tabsNavWrapper.appendChild(tabsNavWrapperBottomLine);\n                    }\n\n                    let tabsNavContainer = item.querySelector('.' + navContainerClass);\n\n                    // add horizontal scroll buttons.\n                    if (tabsNavContainer) {\n                        if (!tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left')) {\n                            let scrollLeftElement = '<div class=\"rd-tabs-nav-hscroll-left\"><a href=\"#\"><i class=\"fas fa-angle-left\"></i></a></div>';\n                            tabsNavContainer.insertAdjacentHTML('afterbegin', scrollLeftElement);\n                        }\n                        if (!tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right')) {\n                            let scrollRightElement = '<div class=\"rd-tabs-nav-hscroll-right\"><a href=\"#\"><i class=\"fas fa-angle-right\"></i></a></div>';\n                            tabsNavContainer.insertAdjacentHTML('beforeend', scrollRightElement);\n                        }\n                    }\n                    // end add horizontal scroll buttons.\n\n                    tabsNav.classList.add('is-overflow-x');\n                } else {\n                    // if real nav width (included all items) is not wider than visible width.\n                    let tabsNavContainer = item.querySelector('.' + navContainerClass);\n\n                    // remove horizontal scroll buttons.\n                    if (tabsNavContainer) {\n                        if (tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left')) {\n                            tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left').remove();\n                        }\n                        if (tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right')) {\n                            tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right').remove();\n                        }\n                    }\n                    // end remove horizontal scroll buttons.\n\n                    if (item.querySelector('.' + navWrapperClass)) {\n                        // if tabs nav wrapper is exists.\n                        // unwrap it. ( https://stackoverflow.com/a/48573634/128761 )\n                        let tabsNavWrapperBottomLine = item.querySelector('.' + navWrapperBottomLineClass);\n                        tabsNavWrapperBottomLine.replaceWith(...tabsNavWrapperBottomLine.childNodes);\n                        let tabsNavWrapper = item.querySelector('.' + navWrapperClass);\n                        tabsNavWrapper.replaceWith(...tabsNavWrapper.childNodes);\n                    }\n\n                    if (item.querySelector('.' + navContainerClass)) {\n                        // if tabs nav container is exists.\n                        // unwrap it. ( https://stackoverflow.com/a/48573634/128761 )\n                        let tabsNavContainer = item.querySelector('.' + navContainerClass);\n                        tabsNavContainer.replaceWith(...tabsNavContainer.childNodes);\n                    }\n\n                    tabsNav.classList.remove('is-overflow-x');\n                }// endif total nav tabs is wider than visible width\n            } else {\n                // if this main tab element is vertical tabs.\n            }// endif .rd-tabs not contain vertical class.\n        });\n    }// setTabNavHorizontalScroll\n\n\n}"]}