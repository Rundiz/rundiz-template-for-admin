{"version":3,"sources":["components/rdta-tabs.js"],"names":["RDTATabs","[object Object]","options","this","selector","targetTabContent","thisClass","countTabNav","activeTabNav","selectorTabNav","querySelector","allLinks","querySelectorAll","forEach","item","index","hash","dataset","targettab","parentElement","classList","add","remove","i","max","children","length","contains","rememberLastTab","window","localStorage","setItem","eventDetail","tabsElement","tabsSelector","targetTab","targetTabNumber","event","CustomEvent","detail","document","dispatchEvent","tabNavElement","activeTabs","activateTabContent","url","xhr","XMLHttpRequest","addEventListener","e","innerHTML","responseText","open","send","defaultOptions","Object","assign","lastTab","getItem","isNaN","parseInt","addRequiredClasses","listenOnTabNav","setTabNavHorizontalScroll","listenWindowResize","listenClickOnTabScroll","thisLink","currentTarget","activeElement","target","rdTabsNavScroll","parentNode","rdTabs","closest","preventDefault","tabsNav","tabsNavLeftPosition","style","transform","replace","firstTabNavItem","expectOffsetLeft","offsetWidth","totalVisibleTabsCounted","offsetLeft","Math","abs","newLeftPosition","lastTabNavItem","mainTabsElement","getAttribute","charAt","ajaxTabContent","tabsNavVisibleWidth","totalTabsNavWIdth","listItem","computed","getComputedStyle","listItemWidth","getBoundingClientRect","width","marginLeft","marginRight","tabsNavContainer","createElement","insertBefore","appendChild","tabsNavWrapperBottomLine","tabsNavWrapper","scrollLeftElement","insertAdjacentHTML","scrollRightElement","replaceWith","childNodes"],"mappings":"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","file":"rdta-tabs.min.js","sourcesContent":["/*! Rundiz template for admin v 2.1.15 \nLicense: MIT*//**\n * RDTA Tabs\n */\n\n\nclass RDTATabs {\n\n\n    /**\n     * Class constructor.\n     * \n     * @private Do not access this method directly, it was called via `init()` method.\n     * @param {object} options\n     * @returns {RDTATabs}\n     */\n    constructor(options) {\n        this.selector = (options.selector ? options.selector : '');\n        this.options = (options.options ? options.options : {});\n    }// constructor\n\n\n    /**\n     * Activate tab content.\n     * \n     * @private This method was called from `addRequiredClasses()`, `listenOnTabNav()`.\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    activateTabContent(selector, targetTabContent) {\n        if (!targetTabContent || !selector) {\n            return false;\n        }\n        let thisClass = this;\n\n        // set active on tab nav.\n        let countTabNav = 0;\n        let activeTabNav = 0;\n        /// get selector's first tab nav that were found.\n        let selectorTabNav = selector.querySelector('.rd-tabs-nav');\n        if (selectorTabNav) {\n            let allLinks = selectorTabNav.querySelectorAll('a');\n            if (allLinks) {\n                allLinks.forEach(function(item, index) {\n                    if (item.hash === targetTabContent || item.dataset.targettab === targetTabContent) {\n                        item.parentElement.classList.add('active');\n                        activeTabNav = countTabNav;\n                    } else {\n                        item.parentElement.classList.remove('active');\n                    }\n                    countTabNav++;\n                });\n            }// endif; allLinks\n        }// endif; selectorTabNav\n\n        // ------------------------------------------\n\n        for (let i = 0, max = selector.children.length; i < max; i++) {\n            if (!selector.children[i].classList.contains('rd-tabs-nav')) {\n                // if children of item is not tab nav.\n                selector.children[i].classList.remove('active');\n            }\n        }\n\n        // set active on tab content.\n        if (selector.querySelector(targetTabContent)) {\n            // if tab content exists.\n            // add active class to it.\n            selector.querySelector(targetTabContent).classList.add('active');\n            if (thisClass.options.rememberLastTab === true && window.localStorage) {\n                // if remember last tab.\n                window.localStorage.setItem('rdtaTabsLast-' + thisClass.selector, activeTabNav);\n            }\n            // trigger event.\n            let eventDetail = {\n                'tabsElement': selector,\n                'tabsSelector': thisClass.selector,\n                'targetTab': targetTabContent,\n                'targetTabNumber': activeTabNav\n            };\n            let event = new CustomEvent('rdta.tabs.activeTab', {'detail': eventDetail});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        }\n    }// activateTabContent\n\n\n    /**\n     * Add required CSS classes.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {object} options\n     * @returns {undefined}\n     */\n    addRequiredClasses(options) {\n        let thisClass = this;\n\n        document.querySelectorAll(thisClass.selector).forEach(function(item, index) {\n            // start looping each selector.\n\n            // add required class name.\n            item.classList.add('rd-tabs');\n            if (item.querySelector('.rd-tabs > ul')) {\n                item.querySelector('.rd-tabs > ul').classList.add('rd-tabs-nav');\n            } else if (item.querySelector('.rd-tabs > ol')) {\n                item.querySelector('.rd-tabs > ol').classList.add('rd-tabs-nav');\n            }\n            for (let i = 0; i < item.children.length; i++) {\n                // loop each children of selector.\n                if (!item.children[i].classList.contains('rd-tabs-nav')) {\n                    // if children of item is not tab nav.\n                    // add tabs content class.\n                    item.children[i].classList.add('rd-tabs-content');\n                }\n            }// endfor;\n\n            // set active class\n            if (item.querySelector('.rd-tabs-nav')) {\n                let tabNavElement = item.querySelector('.rd-tabs-nav');\n                for (let i = 0; i < tabNavElement.children.length; i++) {\n                    // loop each li.\n                    if (i === options.activeTabs) {\n                        let targetTab = '';\n                        if (tabNavElement.children[i].querySelector('a').dataset.targettab) {\n                            targetTab = tabNavElement.children[i].querySelector('a').dataset.targettab;\n                        } else if (tabNavElement.children[i].querySelector('a').hash) {\n                            targetTab = tabNavElement.children[i].querySelector('a').hash;\n                        }\n                        if (targetTab) {\n                            thisClass.activateTabContent(item, targetTab);\n                        }\n                        break;\n                    }\n                }// endfor;\n            }\n        });\n    }// addRequiredClasses\n\n\n    /**\n     * Ajax and set content to target. Did not activate the tab nav.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {string} url\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    ajaxTabContent(url, selector, targetTabContent) {\n        let xhr = new XMLHttpRequest();\n        let thisClass = this;\n\n        xhr.addEventListener('error', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxFailed', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        });\n        xhr.addEventListener('loadend', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxContentLoaded', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n\n            if (selector.querySelector(targetTabContent)) {\n                selector.querySelector(targetTabContent).innerHTML = this.responseText;\n            }\n        });\n\n        xhr.open('GET', url);\n        xhr.send();\n    }// ajaxTabContent\n\n\n    /**\n     * Initialize RDTA tabs.\n     * \n     * @param {string} selector\n     * @param {object} options\n     * @returns {undefined}\n     */\n    static init(selector, options) {\n        let defaultOptions = {\n            'activeTabs': 0,\n            'rememberLastTab': false,\n        };\n        if (typeof(options) === 'object') {\n            options = Object.assign(defaultOptions, options);\n        } else {\n            options = defaultOptions;\n        }\n\n        if (options.rememberLastTab === true && window.localStorage) {\n            // if option was set to remember last tab.\n            let lastTab = window.localStorage.getItem('rdtaTabsLast-' + selector);\n            if (!isNaN(lastTab) && lastTab !== '' && lastTab !== null) {\n                options.activeTabs = parseInt(lastTab);\n            }\n        }\n\n        let thisClass = new this({'selector': selector, 'options': options});\n        thisClass.addRequiredClasses(options);\n        thisClass.listenOnTabNav(options);\n\n        // set tab navbar horizontal scroll if overflow. this must run after set activate tab content.\n        thisClass.setTabNavHorizontalScroll();\n        thisClass.listenWindowResize();\n        thisClass.listenClickOnTabScroll();\n    }// init\n\n\n    /**\n     * Listen click on tabs nav scroll. \n     * \n     * Tabs nav scroll will be visible on tabs size is overflow visible width.\n     * \n     * @since 2.1.16\n     * @private This method was called from `init()`.\n     * @returns {undefined}\n     */\n    listenClickOnTabScroll() {\n        let thisClass = this;\n\n        document.addEventListener('click', (event) => {\n            let thisLink;\n            thisLink = event.currentTarget.activeElement;\n            if (!thisLink) {\n                thisLink = event.target;\n            }\n\n            let rdTabsNavScroll = thisLink.parentNode;\n            let rdTabs = rdTabsNavScroll.closest('.rd-tabs');\n            if (\n                (\n                    rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-left') ||\n                    rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-right')\n                ) &&\n                rdTabs === rdTabsNavScroll.closest(thisClass.selector)\n            ) {\n                // if user is really clicked on tabs nav scroll (horizontal).\n                // prevent follow link.\n                event.preventDefault();\n\n                let tabsNav = rdTabs.querySelector('.rd-tabs-nav');\n                let tabsNavLeftPosition = tabsNav.style.transform.replace(/[^\\-\\d.]/g, '');\n                if ('' === tabsNavLeftPosition) {\n                    tabsNavLeftPosition = 0;\n                } else {\n                    tabsNavLeftPosition = parseInt(tabsNavLeftPosition);\n                }\n\n                if (rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-left')) {\n                    // if user clicked on tabs nav left (<).\n                    let expectOffsetLeft = (tabsNavLeftPosition + parseInt(tabsNav.offsetWidth));\n                    if (expectOffsetLeft > 0) {\n                        expectOffsetLeft = 0;\n                    }\n                    let firstTabNavItem;\n                    let totalVisibleTabsCounted = 1;\n                    for (let i = (tabsNav.children.length - 1); i >= 0; i--) {\n                        //console.log(tabsNav.children[i].innerText, tabsNav.children[i].offsetLeft);\n                        if (parseInt(tabsNav.children[i].offsetLeft) > Math.abs(expectOffsetLeft)) {\n                            firstTabNavItem = tabsNav.children[i];\n                        } else {\n                            break;\n                        }\n                        totalVisibleTabsCounted++;\n                    }// endfor;\n                    //console.log(firstTabNavItem.outerHTML, firstTabNavItem, firstTabNavItem.offsetLeft);\n\n                    let newLeftPosition = firstTabNavItem.offsetLeft;\n                    if (totalVisibleTabsCounted >= tabsNav.children.length) {\n                        newLeftPosition = 0;\n                    } else {\n                        newLeftPosition = '-' + newLeftPosition;\n                    }\n                    tabsNav.style.transform = 'translateX(' + newLeftPosition + 'px)';\n                } else if (rdTabsNavScroll.classList.contains('rd-tabs-nav-hscroll-right')) {\n                    // if user clicked on tabs nav right (>).\n                    let lastTabNavItem;\n                    let totalVisibleTabsCounted = 1;\n                    for (let i = 0; i < tabsNav.children.length; i++) {\n                        //console.log('children offset left:', tabsNav.children[i], tabsNav.children[i].offsetLeft);\n                        if ((tabsNav.children[i].offsetLeft + tabsNavLeftPosition) < tabsNav.offsetWidth === true) {\n                            lastTabNavItem = tabsNav.children[i];\n                        } else {\n                            break;\n                        }\n                        totalVisibleTabsCounted++;\n                    }// endfor;\n                    //console.log('last visible: ', lastTabNavItem);\n\n                    if (totalVisibleTabsCounted <= tabsNav.children.length) {\n                        // if counted for visible tabs is less than all tabs. still be able to work, otherwise don't have to work anymore.\n                        tabsNav.style.transform = 'translateX(-' + lastTabNavItem.offsetLeft + 'px)';\n                    }\n                }// endif user clicked on < or >.\n            }// endif; user is really click on tabs nav scroll.\n        });\n    }// listenClickOnTabScroll\n\n\n    /**\n     * Listen on tab nav click and activate tab content.\n     * \n     * @link https://stackoverflow.com/a/25248515/128761 Method 1 for delegation selection.\n     * @private Do not call this, just call `init()`.\n     * @param {object} options\n     * @returns {undefined}\n     */\n    listenOnTabNav(options) {\n        let thisClass = this;\n        let tabElement = document.querySelector(this.selector);\n\n        document.addEventListener('click', function(event) {\n            let target;\n            if (event.currentTarget && event.currentTarget.activeElement) {\n                target = event.currentTarget.activeElement;\n            }\n            if (!target) {\n                return ;\n            }\n\n            let mainTabsElement = target.closest('.rd-tabs');\n            if (!mainTabsElement) {\n                // if not click inside main tabs element.\n                return ;\n            }\n\n            let tabsNav = target.closest('.rd-tabs-nav');\n            if (!tabsNav) {\n                // if not click inside tabs nav.\n                return ;\n            }\n\n            if (mainTabsElement === target.closest(thisClass.selector)) {\n                event.preventDefault();\n                let targetTab = '';\n                if (target.dataset.targettab) {\n                    targetTab = target.dataset.targettab;\n                } else if (target.hash) {\n                    targetTab = target.hash;\n                }\n\n                if (target.getAttribute('href') && target.getAttribute('href').charAt(0) !== '#' && !target.hash) {\n                    thisClass.ajaxTabContent(target.getAttribute('href'), target.closest(thisClass.selector), targetTab)\n                }\n\n                thisClass.activateTabContent(target.closest(thisClass.selector), targetTab);\n            }\n        });\n    }// listenOnTabNav\n\n\n    /**\n     * Listen on window resize and do the task.\n     * \n     * @since 2.1.16\n     * @private This method was called from `init()`.\n     * @returns {undefined}\n     */\n    listenWindowResize() {\n        let thisClass = this;\n        window.addEventListener('resize', (event) => {\n            thisClass.setTabNavHorizontalScroll();\n        });\n    }// listenWindowResize\n\n\n    /**\n     * Set tabs nav horizontal scroll.\n     * \n     * @since 2.1.16\n     * @private This method was called from `init()`, `listenWindowResize()`.\n     * @returns {undefined}\n     */\n    setTabNavHorizontalScroll() {\n        let thisClass = this;\n        const navContainerClass = 'rd-tabs-nav-container';\n        const navWrapperClass = 'rd-tabs-nav-wrapper';\n        const navWrapperBottomLineClass = 'rd-tabs-nav-wrapper-bottomline';\n\n        document.querySelectorAll(thisClass.selector).forEach((item, index) => {\n            // loop each selector. `item` is now each `.rd-tabs` main element.\n            if (!item.classList.contains('tabs-vertical')) {\n                // if this main tab element is NOT vertical tabs.\n                let tabsNav = item.querySelector('.rd-tabs-nav');\n                let tabsNavVisibleWidth = tabsNav.offsetWidth;\n                let totalTabsNavWIdth = 0;\n                item.querySelectorAll('.rd-tabs-nav > *').forEach((listItem) => {\n                    let computed = getComputedStyle(listItem);\n                    let listItemWidth = (\n                        parseInt(listItem.getBoundingClientRect().width)\n                        + parseInt(computed.marginLeft)\n                        + parseInt(computed.marginRight)\n                    );\n                    totalTabsNavWIdth = (\n                        (parseInt(totalTabsNavWIdth) + listItemWidth)\n                    );\n                });\n\n                if (totalTabsNavWIdth > tabsNavVisibleWidth) {\n                    // if real nav width (included all items) is wider than visible width.\n                    if (!item.querySelector('.' + navContainerClass)) {\n                        // if tabs nav container is not exists.\n                        // make tabs navbar inside container.\n                        let tabsNavContainer = document.createElement('div');\n                        tabsNavContainer.classList.add(navContainerClass);\n                        tabsNav.parentNode.insertBefore(tabsNavContainer, tabsNav);\n                        tabsNavContainer.appendChild(tabsNav);\n                    }\n\n                    if (!item.querySelector('.' + navWrapperClass)) {\n                        // if tabs nav wrapper is not exists.\n                        // wrap tabs navbar inside wrapper to hide overflow.\n                        let tabsNavWrapperBottomLine = document.createElement('div');\n                        tabsNavWrapperBottomLine.classList.add(navWrapperBottomLineClass);\n                        tabsNav.parentNode.insertBefore(tabsNavWrapperBottomLine, tabsNav);\n                        tabsNavWrapperBottomLine.appendChild(tabsNav);\n                        let tabsNavWrapper = document.createElement('div');\n                        tabsNavWrapper.classList.add(navWrapperClass);\n                        tabsNavWrapperBottomLine.parentNode.insertBefore(tabsNavWrapper, tabsNavWrapperBottomLine);\n                        tabsNavWrapper.appendChild(tabsNavWrapperBottomLine);\n                    }\n\n                    let tabsNavContainer = item.querySelector('.' + navContainerClass);\n\n                    // add horizontal scroll buttons.\n                    if (tabsNavContainer) {\n                        if (!tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left')) {\n                            let scrollLeftElement = '<div class=\"rd-tabs-nav-hscroll-left\"><a href=\"#\"><i class=\"fas fa-angle-left\"></i></a></div>';\n                            tabsNavContainer.insertAdjacentHTML('afterbegin', scrollLeftElement);\n                        }\n                        if (!tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right')) {\n                            let scrollRightElement = '<div class=\"rd-tabs-nav-hscroll-right\"><a href=\"#\"><i class=\"fas fa-angle-right\"></i></a></div>';\n                            tabsNavContainer.insertAdjacentHTML('beforeend', scrollRightElement);\n                        }\n                    }\n                    // end add horizontal scroll buttons.\n\n                    tabsNav.classList.add('is-overflow-x');\n                } else {\n                    // if real nav width (included all items) is not wider than visible width.\n                    let tabsNavContainer = item.querySelector('.' + navContainerClass);\n\n                    // remove horizontal scroll buttons.\n                    if (tabsNavContainer) {\n                        if (tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left')) {\n                            tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-left').remove();\n                        }\n                        if (tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right')) {\n                            tabsNavContainer.querySelector('.rd-tabs-nav-hscroll-right').remove();\n                        }\n                    }\n                    // end remove horizontal scroll buttons.\n\n                    if (item.querySelector('.' + navWrapperClass)) {\n                        // if tabs nav wrapper is exists.\n                        // unwrap it. ( https://stackoverflow.com/a/48573634/128761 )\n                        let tabsNavWrapperBottomLine = item.querySelector('.' + navWrapperBottomLineClass);\n                        tabsNavWrapperBottomLine.replaceWith(...tabsNavWrapperBottomLine.childNodes);\n                        let tabsNavWrapper = item.querySelector('.' + navWrapperClass);\n                        tabsNavWrapper.replaceWith(...tabsNavWrapper.childNodes);\n                    }\n\n                    if (item.querySelector('.' + navContainerClass)) {\n                        // if tabs nav container is exists.\n                        // unwrap it. ( https://stackoverflow.com/a/48573634/128761 )\n                        let tabsNavContainer = item.querySelector('.' + navContainerClass);\n                        tabsNavContainer.replaceWith(...tabsNavContainer.childNodes);\n                    }\n\n                    tabsNav.classList.remove('is-overflow-x');\n                }// endif total nav tabs is wider than visible width\n            } else {\n                // if this main tab element is vertical tabs.\n            }// endif .rd-tabs not contain vertical class.\n        });\n    }// setTabNavHorizontalScroll\n\n\n}"]}