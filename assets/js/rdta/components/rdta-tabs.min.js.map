{"version":3,"sources":["components/rdta-tabs.js"],"names":["RDTATabs","[object Object]","options","this","selector","thisClass","document","querySelectorAll","forEach","item","index","classList","add","querySelector","i","children","length","contains","tabNavElement","activeTabs","targetTab","dataset","targettab","hash","activateTabContent","targetTabContent","countTabNav","activeTabNav","selectorTabNav","allLinks","parentElement","remove","max","rememberLastTab","window","localStorage","setItem","eventDetail","tabsElement","tabsSelector","targetTabNumber","event","CustomEvent","detail","dispatchEvent","url","xhr","XMLHttpRequest","addEventListener","e","innerHTML","responseText","open","send","defaultOptions","Object","assign","lastTab","getItem","isNaN","parseInt","addRequiredClasses","listenOnTabNav","target","currentTarget","activeElement","mainTabsElement","closest","preventDefault","getAttribute","charAt","ajaxTabContent"],"mappings":"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","file":"rdta-tabs.min.js","sourcesContent":["/*! Rundiz template for admin v 2.1.14 \nLicense: MIT*//**\n * RDTA Tabs\n */\n\n\nclass RDTATabs {\n\n\n    /**\n     * Class constructor.\n     * \n     * @private Do not access this method directly, it was called via `init()` method.\n     * @param {object} options\n     * @returns {RDTATabs}\n     */\n    constructor(options) {\n        this.selector = (options.selector ? options.selector : '');\n        this.options = (options.options ? options.options : {});\n    }// constructor\n\n\n    /**\n     * Add required CSS classes.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {type} selector\n     * @param {type} options\n     * @returns {undefined}\n     */\n    addRequiredClasses(selector, options) {\n        let thisClass = this;\n\n        document.querySelectorAll(selector).forEach(function(item, index) {\n            // start looping each selector.\n\n            // add required class name.\n            item.classList.add('rd-tabs');\n            if (item.querySelector('ul')) {\n                item.querySelector('ul').classList.add('rd-tabs-nav');\n            } else if (item.querySelector('ol')) {\n                item.querySelector('ol').classList.add('rd-tabs-nav');\n            }\n            for (let i = 0; i < item.children.length; i++) {\n                // loop each children of selector.\n                if (!item.children[i].classList.contains('rd-tabs-nav')) {\n                    // if children of item is not tab nav.\n                    // add tabs content class.\n                    item.children[i].classList.add('rd-tabs-content');\n                }\n            }// endfor;\n\n            // set active class\n            if (item.querySelector('.rd-tabs-nav')) {\n                let tabNavElement = item.querySelector('.rd-tabs-nav');\n                for (let i = 0; i < tabNavElement.children.length; i++) {\n                    // loop each li.\n                    if (i === options.activeTabs) {\n                        let targetTab = '';\n                        if (tabNavElement.children[i].querySelector('a').dataset.targettab) {\n                            targetTab = tabNavElement.children[i].querySelector('a').dataset.targettab;\n                        } else if (tabNavElement.children[i].querySelector('a').hash) {\n                            targetTab = tabNavElement.children[i].querySelector('a').hash;\n                        }\n                        if (targetTab) {\n                            thisClass.activateTabContent(item, targetTab);\n                        }\n                        break;\n                    }\n                }// endfor;\n            }\n        });\n    }// addRequiredClasses\n\n\n    /**\n     * Activate tab content.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    activateTabContent(selector, targetTabContent) {\n        if (!targetTabContent || !selector) {\n            return false;\n        }\n        let thisClass = this;\n\n        // set active on tab nav.\n        let countTabNav = 0;\n        let activeTabNav = 0;\n        /// get selector's first tab nav that were found.\n        let selectorTabNav = selector.querySelector('.rd-tabs-nav');\n        if (selectorTabNav) {\n            let allLinks = selectorTabNav.querySelectorAll('a');\n            if (allLinks) {\n                allLinks.forEach(function(item, index) {\n                    if (item.hash === targetTabContent || item.dataset.targettab === targetTabContent) {\n                        item.parentElement.classList.add('active');\n                        activeTabNav = countTabNav;\n                    } else {\n                        item.parentElement.classList.remove('active');\n                    }\n                    countTabNav++;\n                });\n            }// endif; allLinks\n        }// endif; selectorTabNav\n\n        // ------------------------------------------\n\n        for (let i = 0, max = selector.children.length; i < max; i++) {\n            if (!selector.children[i].classList.contains('rd-tabs-nav')) {\n                // if children of item is not tab nav.\n                selector.children[i].classList.remove('active');\n            }\n        }\n\n        // set active on tab content.\n        if (selector.querySelector(targetTabContent)) {\n            // if tab content exists.\n            // add active class to it.\n            selector.querySelector(targetTabContent).classList.add('active');\n            if (thisClass.options.rememberLastTab === true && window.localStorage) {\n                // if remember last tab.\n                window.localStorage.setItem('rdtaTabsLast-' + thisClass.selector, activeTabNav);\n            }\n            // trigger event.\n            let eventDetail = {\n                'tabsElement': selector,\n                'tabsSelector': thisClass.selector,\n                'targetTab': targetTabContent,\n                'targetTabNumber': activeTabNav\n            };\n            let event = new CustomEvent('rdta.tabs.activeTab', {'detail': eventDetail});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        }\n    }// activateTabContent\n\n\n    /**\n     * Ajax and set content to target. Did not activate the tab nav.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {string} url\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    ajaxTabContent(url, selector, targetTabContent) {\n        let xhr = new XMLHttpRequest();\n        let thisClass = this;\n\n        xhr.addEventListener('error', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxFailed', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        });\n        xhr.addEventListener('loadend', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxContentLoaded', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n\n            if (selector.querySelector(targetTabContent)) {\n                selector.querySelector(targetTabContent).innerHTML = this.responseText;\n            }\n        });\n\n        xhr.open('GET', url);\n        xhr.send();\n    }// ajaxTabContent\n\n\n    /**\n     * Initialize RDTA tabs.\n     * \n     * @param {string} selector\n     * @param {object} options\n     * @returns {undefined}\n     */\n    static init(selector, options) {\n        let defaultOptions = {\n            'activeTabs': 0,\n            'rememberLastTab': false,\n        };\n        if (typeof(options) === 'object') {\n            options = Object.assign(defaultOptions, options);\n        } else {\n            options = defaultOptions;\n        }\n\n        if (options.rememberLastTab === true && window.localStorage) {\n            // if option was set to remember last tab.\n            let lastTab = window.localStorage.getItem('rdtaTabsLast-' + selector);\n            if (!isNaN(lastTab) && lastTab !== '' && lastTab !== null) {\n                options.activeTabs = parseInt(lastTab);\n            }\n        }\n\n        let thisClass = new this({'selector': selector, 'options': options});\n        thisClass.addRequiredClasses(selector, options);\n        thisClass.listenOnTabNav(selector, options);\n    }// init\n\n\n    /**\n     * Listen on tab nav click and activate tab content.\n     * \n     * @link https://stackoverflow.com/a/25248515/128761 Method 1 for delegation selection.\n     * @private Do not call this, just call `init()`.\n     * @param {type} selector\n     * @param {type} options\n     * @returns {undefined}\n     */\n    listenOnTabNav(selector, options) {\n        let thisClass = this;\n        let tabElement = document.querySelector(selector);\n\n        document.addEventListener('click', function(event) {\n            let target;\n            if (event.currentTarget && event.currentTarget.activeElement) {\n                target = event.currentTarget.activeElement;\n            }\n            if (!target) {\n                return ;\n            }\n\n            let mainTabsElement = target.closest('.rd-tabs');\n            if (!mainTabsElement) {\n                // if not click inside main tabs element.\n                return ;\n            }\n\n            let tabsNav = target.closest('.rd-tabs-nav');\n            if (!tabsNav) {\n                // if not click inside tabs nav.\n                return ;\n            }\n\n            if (mainTabsElement === target.closest(selector)) {\n                event.preventDefault();\n                let targetTab = '';\n                if (target.dataset.targettab) {\n                    targetTab = target.dataset.targettab;\n                } else if (target.hash) {\n                    targetTab = target.hash;\n                }\n\n                if (target.getAttribute('href') && target.getAttribute('href').charAt(0) !== '#' && !target.hash) {\n                    thisClass.ajaxTabContent(target.getAttribute('href'), target.closest(selector), targetTab)\n                }\n\n                thisClass.activateTabContent(target.closest(selector), targetTab);\n            }\n        });\n    }// listenOnTabNav\n\n\n}"]}