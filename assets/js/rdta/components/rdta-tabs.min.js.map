{"version":3,"sources":["components/rdta-tabs.js"],"names":["RDTATabs","[object Object]","options","this","selector","thisClass","document","querySelectorAll","forEach","item","index","classList","add","querySelector","i","children","length","contains","tabNavElement","activeTabs","targetTab","dataset","targettab","hash","activateTabContent","targetTabContent","remove","countTabNav","activeTabNav","parentElement","rememberLastTab","window","localStorage","setItem","eventDetail","tabsElement","tabsSelector","targetTabNumber","event","CustomEvent","detail","dispatchEvent","url","xhr","XMLHttpRequest","addEventListener","e","innerHTML","responseText","open","send","defaultOptions","Object","assign","lastTab","getItem","isNaN","parseInt","addRequiredClasses","listenOnTabNav","target","parentNode","matches","preventDefault","getAttribute","charAt","ajaxTabContent","closest"],"mappings":"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","file":"rdta-tabs.min.js","sourcesContent":["/*! Rundiz template for admin v 2.0.23 \nLicense: MIT*//**\n * RDTA Tabs\n */\n\n\nclass RDTATabs {\n\n\n    /**\n     * Class constructor.\n     * \n     * @private Do not access this method directly, it was called via `init()` method.\n     * @param {object} options\n     * @returns {RDTATabs}\n     */\n    constructor(options) {\n        this.selector = (options.selector ? options.selector : '');\n        this.options = (options.options ? options.options : {});\n    }// constructor\n\n\n    /**\n     * Add required CSS classes.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {type} selector\n     * @param {type} options\n     * @returns {undefined}\n     */\n    addRequiredClasses(selector, options) {\n        let thisClass = this;\n\n        document.querySelectorAll(selector).forEach(function(item, index) {\n            // start looping each selector.\n\n            // add required class name.\n            item.classList.add('rd-tabs');\n            if (item.querySelector('ul')) {\n                item.querySelector('ul').classList.add('rd-tabs-nav');\n            } else if (item.querySelector('ol')) {\n                item.querySelector('ol').classList.add('rd-tabs-nav');\n            }\n            for (let i = 0; i < item.children.length; i++) {\n                // loop each children of selector.\n                if (!item.children[i].classList.contains('rd-tabs-nav')) {\n                    // if children of item is not tab nav.\n                    // add tabs content class.\n                    item.children[i].classList.add('rd-tabs-content');\n                }\n            }// endfor;\n\n            // set active class\n            if (item.querySelector('.rd-tabs-nav')) {\n                let tabNavElement = item.querySelector('.rd-tabs-nav');\n                for (let i = 0; i < tabNavElement.children.length; i++) {\n                    // loop each li.\n                    if (i === options.activeTabs) {\n                        let targetTab = '';\n                        if (tabNavElement.children[i].querySelector('a').dataset.targettab) {\n                            targetTab = tabNavElement.children[i].querySelector('a').dataset.targettab;\n                        } else if (tabNavElement.children[i].querySelector('a').hash) {\n                            targetTab = tabNavElement.children[i].querySelector('a').hash;\n                        }\n                        if (targetTab) {\n                            thisClass.activateTabContent(item, targetTab);\n                        }\n                        break;\n                    }\n                }// endfor;\n            }\n        });\n    }// addRequiredClasses\n\n\n    /**\n     * Activate tab content.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    activateTabContent(selector, targetTabContent) {\n        if (!targetTabContent) {\n            return false;\n        }\n        let thisClass = this;\n\n        for (let i = 0; i < selector.children.length; i++) {\n            if (!selector.children[i].classList.contains('rd-tabs-nav')) {\n                // if children of item is not tab nav.\n                selector.children[i].classList.remove('active');\n            }\n        }\n\n        // set active on tab nav.\n        let countTabNav = 0;\n        let activeTabNav = 0;\n        selector.querySelectorAll('.rd-tabs-nav a').forEach(function(item, index) {\n            if (item.hash === targetTabContent || item.dataset.targettab === targetTabContent) {\n                item.parentElement.classList.add('active');\n                activeTabNav = countTabNav;\n            } else {\n                item.parentElement.classList.remove('active');\n            }\n            countTabNav++;\n        });\n\n        // set active on tab content.\n        if (selector.querySelector(targetTabContent)) {\n            // if tab content exists.\n            // add active class to it.\n            selector.querySelector(targetTabContent).classList.add('active');\n            if (thisClass.options.rememberLastTab === true && window.localStorage) {\n                // if remember last tab.\n                window.localStorage.setItem('rdtaTabsLast-' + thisClass.selector, activeTabNav);\n            }\n            // trigger event.\n            let eventDetail = {\n                'tabsElement': selector,\n                'tabsSelector': thisClass.selector,\n                'targetTab': targetTabContent,\n                'targetTabNumber': activeTabNav\n            };\n            let event = new CustomEvent('rdta.tabs.activeTab', {'detail': eventDetail});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        }\n    }// activateTabContent\n\n\n    /**\n     * Ajax and set content to target. Did not activate the tab nav.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {string} url\n     * @param {object} selector Object of each tab main element.\n     * @param {string} targetTabContent\n     * @returns {undefined}\n     */\n    ajaxTabContent(url, selector, targetTabContent) {\n        let xhr = new XMLHttpRequest();\n        let thisClass = this;\n\n        xhr.addEventListener('error', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxFailed', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n        });\n        xhr.addEventListener('loadend', function(e) {\n            let event = new CustomEvent('rdta.tabs.ajaxContentLoaded', {'detail': e});\n            document.querySelector(thisClass.selector).dispatchEvent(event);\n\n            if (selector.querySelector(targetTabContent)) {\n                selector.querySelector(targetTabContent).innerHTML = this.responseText;\n            }\n        });\n\n        xhr.open('GET', url);\n        xhr.send();\n    }// ajaxTabContent\n\n\n    /**\n     * Initialize RDTA tabs.\n     * \n     * @param {string} selector\n     * @param {object} options\n     * @returns {undefined}\n     */\n    static init(selector, options) {\n        let defaultOptions = {\n            'activeTabs': 0,\n            'rememberLastTab': false,\n        };\n        if (typeof(options) === 'object') {\n            options = Object.assign(defaultOptions, options);\n        } else {\n            options = defaultOptions;\n        }\n\n        if (options.rememberLastTab === true && window.localStorage) {\n            // if option was set to remember last tab.\n            let lastTab = window.localStorage.getItem('rdtaTabsLast-' + selector);\n            if (!isNaN(lastTab) && lastTab !== '' && lastTab !== null) {\n                options.activeTabs = parseInt(lastTab);\n            }\n        }\n\n        let thisClass = new this({'selector': selector, 'options': options});\n        thisClass.addRequiredClasses(selector, options);\n        thisClass.listenOnTabNav(selector, options);\n    }// init\n\n\n    /**\n     * Listen on tab nav click and activate tab content.\n     * \n     * @private Do not call this, just call `init()`.\n     * @param {type} selector\n     * @param {type} options\n     * @returns {undefined}\n     */\n    listenOnTabNav(selector, options) {\n        let thisClass = this;\n        let tabElement = document.querySelector(selector);\n\n        document.addEventListener('click', function(event) {\n            // match selector.\n            // @link https://stackoverflow.com/a/25248515/128761 Original source code.\n            for (let target= event.target; target && target != this; target = target.parentNode) {\n                // loop parent nodes from the target to the delegation node\n                if (target.matches(selector + ' .rd-tabs-nav a')) {\n                    event.preventDefault();\n                    let targetTab = '';\n                    if (target.dataset.targettab) {\n                        targetTab = target.dataset.targettab;\n                    } else if (target.hash) {\n                        targetTab = target.hash;\n                    }\n\n                    if (target.getAttribute('href') && target.getAttribute('href').charAt(0) !== '#' && !target.hash) {\n                        thisClass.ajaxTabContent(target.getAttribute('href'), target.closest(selector), targetTab)\n                    }\n\n                    thisClass.activateTabContent(target.closest(selector), targetTab);\n                    break;\n                }\n            }\n        });\n    }// listenOnTabNav\n\n\n}"]}